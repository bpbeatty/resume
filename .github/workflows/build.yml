---
name: Build
on:
  pull_request:
    paths-ignore:
      - '**.md'
  workflow_dispatch:

env:
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  build-image:
    name: Build
    runs-on: ubuntu-24.04
    continue-on-error: false
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image_name:
          - resume-writer
    outputs:
      tag: ${{ steps.generate-tags.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate Timestamp with incrementing version point
          TIMESTAMP="$(date +%Y%m%d)"
          LIST_TAGS="$(mktemp)"
          while [[ ! -s "$LIST_TAGS" ]]; do
              skopeo list-tags docker://${{ env.IMAGE_REGISTRY }}/${{ matrix.image_name }} > "$LIST_TAGS"
          done
          if [[ $(cat "$LIST_TAGS" | jq "any(.Tags[]; contains(\"$TIMESTAMP\"))") == "true" ]]; then
              POINT="1"
              while $(cat "$LIST_TAGS" | jq -e "any(.Tags[]; contains(\"$TIMESTAMP.$POINT\"))")
              do
                  (( POINT++ ))
              done
          fi

          if [[ -n "${POINT:-}" ]]; then
              TIMESTAMP="$TIMESTAMP.$POINT"
          fi

          # Add a sha tag for tracking builds during a pull request
          COMMIT_TAGS=("$(git rev-parse --short HEAD)" "${TIMESTAMP}")
          BUILD_TAGS=("latest" "${TIMESTAMP}")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT
          echo "tag=${alias_tags[0]}" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        id: meta
        with:
          images: |
            ${{ matrix.image_name }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/bpbeatty/resume/master/README.md
            org.opencontainers.image.description=An image to build my resume
            org.opencontainers.image.title=${{ matrix.image_name }}

      # Build image using Buildah action
      - name: Build Image
        id: build-image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          containerfiles: |
            ./Containerfile
          image: ${{ matrix.image_name }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      # Sign container
      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build-image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"

  build-pdf:
    name: Build PDF
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    needs: build-image
    container:
      image: ghcr.io/bpbeatty/resume-writer:${{ needs.build-image.outputs.tag }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ github.token }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4

      - name: Make PDF
        run: make

      - name: Upload PDF
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: bpbeatty-resume
          path: ./bin/resume.pdf
